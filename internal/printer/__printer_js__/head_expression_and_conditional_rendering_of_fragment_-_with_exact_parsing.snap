
[TestPrinter/head_expression_and_conditional_rendering_of_fragment_-_with_exact_parsing - 1]
## Input

```
/-/-/-/
const testBool = true;
/-/-/-/
<html>
    <head>
        <meta charset="UTF-8" />
        <title>{testBool ? "Hey" : "Bye"}</title>
        {testBool && (<><meta name="description" content="test" /></>)}
    </head>
    <body>
      <div></div>
    </body>
</html>
```

## Output

```js
import {
  Fragment,
  render as $$render,
  createAstro as $$createAstro,
  createComponent as $$createComponent,
  renderComponent as $$renderComponent,
  renderHead as $$renderHead,
  maybeRenderHead as $$maybeRenderHead,
  unescapeHTML as $$unescapeHTML,
  renderSlot as $$renderSlot,
  mergeSlots as $$mergeSlots,
  addAttribute as $$addAttribute,
  spreadAttributes as $$spreadAttributes,
  defineStyleVars as $$defineStyleVars,
  defineScriptVars as $$defineScriptVars,
  renderTransition as $$renderTransition,
  createTransitionScope as $$createTransitionScope,
  renderScript as $$renderScript,
  createMetadata as $$createMetadata
} from "http://localhost:3000/";

export const $$metadata = $$createMetadata(import.meta.url, { modules: [], hydratedComponents: [], clientOnlyComponents: [], hydrationDirectives: new Set([]), hoisted: [] });

const $$Component = $$createComponent(($$result, $$props, $$slots) => {

const testBool = true;

return $$render`<html>
    <head>
        <meta charset="UTF-8">
        <title>${testBool ? "Hey" : "Bye"}</title>
        ${testBool && ($$render`${$$renderComponent($$result,'Fragment',Fragment,{},{"default": () => $$render`<meta name="description" content="test">`,})}`)}
    ${$$renderHead($$result)}</head>
    <body>
      <div></div>
    </body>
</html>`;
}, undefined, undefined);
export default $$Component;
```
---
